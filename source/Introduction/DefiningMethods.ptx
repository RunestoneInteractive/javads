<?xml version="1.0"?>
<section xml:id="introduction_defining-methods">
  <title>Defining Methods</title>
  <p>The earlier example of procedural abstraction called upon a Java
    method called <c>sqrt</c> from the <c>Math</c> module to compute the square
            root. In general, we can hide the details of any computation by defining
            a method. A method definition requires a name, a group of
            parameters, and a body. It may also explicitly return a value. For
            example, the method defined below returns the square of the
            value you pass into it.</p>

          <aside>
            <p>Methods are often called <em>functions</em> or <em>procedures</em> in other programming languages.</p>
    </aside>

          <console><output>
jshell&gt; public static double square(double n) {
   ...&gt;     return n * n;
   ...&gt; }
|  created method square(double)

jshell&gt; square(2.5);
$2 ==&gt; 6.25
      </output></console>

  <p>Let's look at the first line of the method one token at a time:</p>
  <p>
    <ul>
      <li><p><c>public</c> says that this method can be invoked by any program that imports the class it belongs to.</p></li>
      <li><p><c>static</c> means that this method belongs to the class as a whole (we will discuss this more in <xref ref="introduction_object-oriented-programming-in-java-defining-classes"/>).</p></li>
      <li><p><c>double</c> is the type of data this method will return.</p></li>
      <li><p><c>square</c> is the name of the method.</p></li>
      <li><p><c>double n</c> specifies the type and name of the method's parameter(s); in this example there is only one parameter. This means that <c>square</c> needs only one piece of data to do its work.</p></li>
    </ul>
  </p>
  <p>The details of how the method works are hidden <q>inside the box</q>;
    it returns the result of multiplying result of <c>n * n</c>.</p>

  <p>We can invoke or <term>call</term> the <c>method</c> function giving its name and passing an actual parameter value, in this case, <c>2.5</c> to fill in the parameter. Note that the call to <c>square</c> returns a <c>double</c> that can in turn be passed to another method invocation.</p>

  <p>We could implement our own square root function by using a well-known technique called Newton's method or the Newton&#x2013;Raphson method, named after Isaac Newton and Joseph Raphson. The Newton&#x2013;Raphson method for approximating square roots performs an iterative computation that converges on the correct value. The equation <m>newguess = \frac {1}{2} * (oldguess + \frac {n}{oldguess})</m> takes a value <m>n</m> and repeatedly guesses the square root by making each <m>newguess</m> the <m>oldguess</m> in the subsequent iteration. The initial guess used here is <m>\frac {n}{2}</m>. <xref ref="introduction_lst-root"/> shows a program with a method definition that accepts a value <m>n</m> and returns the square root of <m>n</m> after making 20 guesses. Again, the details of the Newton&#x2013;Raphson method are hidden inside the method definition and the user does not have to know anything about the implementation to use the method for its intended purpose. <xref ref="introduction_lst-root"/> also shows the use of the <c>//</c> characters as a comment marker. Any characters that follow the <c>//</c> on a line are ignored.</p>

<listing xml:id="introduction_lst-root">
<program label="introduction_lst-root"  language="java" interactive="activecode">
    <input>
public class MySquareRoot {

    public static double squareRoot(double n) {
        double root = n / 2.0; // initial guess is 1/2 of n
        for (int iter=0; iter &lt; 20; iter++) {
            root = 0.5 * (root + (n / root));
        }
        return root;
    }

    public static void main(String[] args) {
        System.out.println(squareRoot(9));
        System.out.println(squareRoot(4563));
    }
}
</input>
</program>
</listing>


  <exercises>
    <title>Self Check</title>
    <p>Here's a self check that really covers everything so far.  You may have heard of the infinite monkey theorem?  The theorem states that a monkey hitting keys at random on a typewriter keyboard for an infinite amount of time will almost surely type a given text, such as the complete works of William Shakespeare.  Well, suppose we replace a monkey with a Java method.  How long do you think it would take for a Java method to generate just one sentence of Shakespeare?  The sentence we'll shoot for is:  <q>methinks it is like a weasel</q></p>
    <p>You're not going to want to run this one in jshell, so fire up your favorite Java IDE.  The way we'll simulate this is to write a function that generates a string that is 28 characters long by choosing random letters from the 26 letters in the alphabet plus the space.  We'll write another function that will score each generated string by comparing the randomly generated string to the goal.</p>
    <p>A third function will repeatedly call generate and score, then if 100% of the letters are correct we are done.  If the letters are not correct then we will generate a whole new string.To make it easier to follow your program's progress this third function should print out the best string generated so far and its score every 1000 tries.</p>
    <p>In order to do this program, you will need to know how to generate random numbers. The following program generates ten random numbers in the range 0 up to (but not including) 100:</p>

    <program language="java" line-numbers="yes" interactive="activecode">
      <input>
import java.util.Random;

public class TenRandomIntegers {
    public static void main(String[] args) {
        Random generator = new Random();

        for (int i = 0; i &lt; 10; i++) {
            int randomInt = generator.nextInt(100);
            System.out.println(randomInt);
        }
    }
}
</input></program>

<p>Line 1 imports the <c>Random</c> class from the <c>java.util</c> package.</p>
<p>In line 5, we create an instance of the <c>Random</c> class, naming it <c>generator</c>. (It could have any name, but the one we chose is meaningful).</p>
<p>Lines 7-10 produce the random numbers by calling the random number generator's <c>nextInt</c> method. The argument is the exclusive upper bound on the random integer; thus, this statement will generate a number from 0 (inclusive) up to, but not including, 100 (exclusive).</p>

<p>Though you do not need it for this program, for the sake of completeness: If you need to generate a <c>double</c>, call the <c>nextDouble()</c> method, which returns a <c>double</c> value from 0.0 (inclusive) up to, but not including, 1.00 (exclusive).</p>

  </exercises>
  <exercises>
    <title>Self Check Challenge</title>
    <p>See if you can improve upon the program in the self check by keeping letters that are correct and only modifying one character in the best string so far.  This is a type of algorithm in the class of &#x2018;hill climbing' algorithms, that is we only keep the result if it is better than the previous one.</p>
  </exercises>
  <!--<video xml:id="monkeyvid" youtube="yZS_vb549cc" width="auto"/>-->
</section>
